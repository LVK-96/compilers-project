Program -> Declaration-list #END
Declaration-list -> Declaration Declaration-list | EPSILON
Declaration -> Declaration-initial Declaration-prime
Declaration-initial -> Type-specifier ID
Declaration-prime -> #FUNCTION Fun-declaration-prime | Var-declaration-prime
Var-declaration-prime -> ; | [ NUM ] ;
Fun-declaration-prime -> ( #START_PARAM_COUNTER Params #STOP_PARAM_COUNTER ) Compound-stmt
Type-specifier -> int | void
Params -> int ID #PARAM Param-prime Param-list | void #PARAM Param-list-void-abtar
Param-list-void-abtar -> ID Param-prime Param-list | EPSILON
Param-list -> , Param Param-list | EPSILON
Param -> Declaration-initial #PARAM Param-prime
Param-prime -> [ ] | EPSILON
Compound-stmt -> { Declaration-list Statement-list }
Statement-list -> Statement Statement-list | EPSILON
Statement -> Expression-stmt | Compound-stmt | Selection-stmt | Iteration-stmt | Return-stmt | Switch-stmt
Expression-stmt -> Expression ; | #CONTINUE continue ; | #BREAK break ; | ;
Selection-stmt -> if ( Expression ) Statement else Statement
Iteration-stmt -> while #ENTER_WHILE ( Expression ) Statement #EXIT_WHILE
Return-stmt -> return Return-stmt-prime
Return-stmt-prime -> ; | Expression ;
Switch-stmt -> switch #ENTER_SWITCH_CASE ( Expression ) { Case-stmts Default-stmt } #EXIT_SWITCH_CASE
Case-stmts -> Case-stmt Case-stmts | EPSILON
Case-stmt -> case NUM : Statement-list
Default-stmt -> default : Statement-list | EPSILON
Expression -> Simple-expression-zegond | #START_ARGUMENT_COUNTER #TYPE_CHECK #START_TYPE_CHECK ID B
B -> = Expression | [ Expression ] H | Simple-expression-prime
H -> = Expression | G D C
Simple-expression-zegond -> Additive-expression-zegond C
Simple-expression-prime -> Additive-expression-prime C
C -> Relop Additive-expression | #CANCEL_TYPE_CHECK EPSILON
Relop -> < | ==
Additive-expression -> Term D
Additive-expression-prime -> Term-prime D
Additive-expression-zegond -> Term-zegond D
D -> Addop Term D | EPSILON
Addop -> + | -
Term -> Factor G
Term-prime -> Factor-prime G
Term-zegond -> Factor-zegond G
G -> * Factor G | EPSILON
Factor -> ( Expression ) | #TYPE_CHECK #START_TYPE_CHECK ID Var-call-prime | #TYPE_CHECK NUM
Var-call-prime -> ( #CANCEL_TYPE_CHECK Args #STOP_ARGUMENT_COUNTER ) | Var-prime
Var-prime -> [ Expression ] | EPSILON
Factor-prime -> ( #CANCEL_TYPE_CHECK Args #STOP_ARGUMENT_COUNTER ) | EPSILON
Factor-zegond -> ( Expression ) | #TYPE_CHECK NUM
Args -> Arg-list | EPSILON
Arg-list -> #ARGUMENT Expression Arg-list-prime
Arg-list-prime -> , #ARGUMENT Expression Arg-list-prime | EPSILON
